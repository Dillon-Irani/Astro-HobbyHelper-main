---
import Layout from '../layouts/Layout.astro';
import { XataClient } from '.././xata';
import styles from '../styles/adminDashboard.module.css';
import { userInfo, getUserInfo, isLoggedIn, clearUserInfo  } from '../components/userInformation';
// Redirect to hobby home page if not admin 
const isAdmin = isLoggedIn.get() && userInfo.get().userType === 'admin';
if (!isAdmin) {
  return Astro.redirect('/HobbyHome'); 
};
const xata = new XataClient({
  apiKey: import.meta.env.XATA_API_KEY,
  branch: import.meta.env.XATA_BRANCH
});
const { records: categories } = await xata.db.product_category.getPaginated({
  pagination: {
    size: 200
  }

})
interface Message {
  categoryName: string;
  error?: string;
}
const message: Message = { categoryName: "" };

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const action = data.get('action');

    // Check if the action is for adding a category
    if (action === 'addCategory') {
      const categoryName = String(data.get("categoryName"));
      let parentCategoryId = null;

      // Get the value of "parentCategory"
      const parentCategoryValue = data.get("parentCategory");

      // Check if the value is a string
      if (typeof parentCategoryValue === "string") {
        // Convert the string to an integer
        parentCategoryId = parseInt(parentCategoryValue);
      }

      // Check if the category name is blank
      if (!categoryName.trim()) {
        message.error = "Category name cannot be blank.";
      } else {
        // Fetch the most recent category and calculate the new product category ID
        const { records: recentCategories } = await xata.db.product_category
          .sort('product_category_id', 'desc')
          .getPaginated({ pagination: { size: 1 } });
        const newProductCategoryId = recentCategories.length > 0 ? recentCategories[0].product_category_id + 1 : 1;

        // Check if the category already exists
        const existingCategory = await xata.db.product_category.filter({ category_name: categoryName }).getMany();

        if (existingCategory.length > 0) {
          // Category already exists
          message.error = "Category: " + categoryName + " already exists.";
        } else {
          // Create a new category
          await xata.db.product_category.create({
            product_category_id: newProductCategoryId,
            category_name: categoryName,
            parent_category_id: parentCategoryId || null
          });
          message.categoryName = `Category "${categoryName}" added successfully!`;
        }
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}



---
<style>
  .confirmation-message {
    background-color: #4CAF50;
    color: #fff;
    padding: 10px;
    border-radius: 4px;
    margin-top: 10px; 
    margin-bottom: 15px; 
    text-align: center;
  }

  .error-message {
    background-color: red;
    color: white;
    padding: 10px;
    border-radius: 4px;
    margin-top: 10px; 
    margin-bottom: 15px;
    text-align: center;
  }

  body {
    font-family: Arial, sans-serif;
    color: #fff;
  }

  .container {
    background-color: #535C91;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 20px;
    max-width: 500px;
    margin: 0 auto;
  }

  .container h2 {
    text-align: center; /* Center the heading */
    color: #070F2B;
  }

  form {
    margin-top: 20px; /* Add some space between heading and form */
  }

  label {
    font-weight: bold;
    margin-bottom: 5px; /* Add some space below each label */
    display: block; /* Make labels block elements */
  }

  input,
  select {
    width: 100%;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
    font-size: 16px;
    margin-bottom: 10px; /* Add some space below each input/select */
  }

  button {
    background-color: #4CAF50;
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
    width: 100%; /* Make the button full-width */
  }

  button:hover {
    background-color: #45a049;
  }

  .backlog-button {
    background-color: #007bff; /* Nice blue color */
    color: white; /* Text color */
    padding: 10px 20px; /* Adjust padding as needed */
    border: none;
    border-radius: 5px;
    width: 15%;
    cursor: pointer;
    display: block; /* Ensure it spans the full width */
    margin: 0 auto; /* Center horizontally */
}

.backlog-button:hover {
    background-color: #0056b3; /* Darker shade of blue on hover */
}
</style>

<Layout title='Add Category'>
  {message.error && (
    <div class="error-message">
      <p class="error">{message.error}</p>
    </div>
  )}

  {message.categoryName && (
    <div class={message.categoryName.includes("successfully") ? "confirmation-message" : "error-message"}>
      <p class="confirmation">{message.categoryName}</p>
    </div>
  )}

  <div class="container">
    <h2>Add New Category</h2>
    <form method="POST">
      <input type="hidden" name="action" value="addCategory">
      <label for="categoryName">Category Name:</label>
      <input type="text" id="categoryName" name="categoryName" required />
      <label for="parentCategory">Parent Category:</label>
      <select id="parentCategory" name="parentCategory">
        <option value="">Select Parent Category if applicable</option>
        {categories.map(category => (
          <option value={category.product_category_id}>
            {category.category_name}
          </option>
        ))}
      </select>
      <button type="submit">Add Category</button>
    </form>
  </div>
  <br />
  <button class='backlog-button' onclick="window.location.href='/AdminDashboard'" >Return to Dashboard</button>
  
</Layout>