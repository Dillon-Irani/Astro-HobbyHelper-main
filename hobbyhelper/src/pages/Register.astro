---
import Layout from '../layouts/Layout.astro';
import { XataClient } from '.././xata';
import bcrypt from "bcrypt";

const xata = new XataClient({
  apiKey: import.meta.env.XATA_API_KEY,
  branch: import.meta.env.XATA_BRANCH
});

const { records: hobbyCategories } = await xata.db.product_category.getPaginated({
  pagination: {
    size: 50
  }
});

const message = { username: "", password: "", email: "" };

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();

    // Fetch users sorted by user_id in descending order
    const { records: recentusers } = await xata.db.hh_user
      .sort( 'user_id', 'desc' )
      .getPaginated({ pagination: { size: 1 } });

    // Calculate the new user_id
    const newUser_id = recentusers.length > 0 ? recentusers[0].user_id + 1 : 1;

    const inputUsername = String(data.get("username"));
    const inputPassword = String(data.get("password"));
    const inputPhone = String(data.get("phone"));
    const inputAge = String(data.get("age"));
    const inputEmail = String(data.get("email"));
    const inputFavHobby = String(data.get("favouriteHobby"));
    const inputBio = String(data.get("bio")); 

    const userPhone = parseInt(inputPhone);
    const userAge = parseInt(inputAge);
    console.log(inputUsername, inputPassword, inputEmail, inputBio);

    const hashedPassword = await bcrypt.hash(inputPassword, 10);

    // Fetch user data from the database
    const users = await xata.db.hh_user
      .filter({
        username: inputUsername,
      })
      .getMany();

    if (users.length > 0) {
      // User already exists
      message.username = "Username is already taken. Please choose another one.";
    } else {
      // User doesn't exist, you can proceed with registration
      const newUser = await xata.db.hh_user.create({
        user_id: newUser_id,
        username: inputUsername,
        password: hashedPassword,
        email_address: inputEmail, 
        phone_number: userPhone,
        age: userAge,
        favourite_hobby: inputFavHobby,
        bio: inputBio,
        user_type: 'user'
      });

      message.username = `User ${newUser.username} registered successfully!`;
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<style>
  

body  {
    background-image: url('https://wallpapercave.com/wp/wp5294549.jpg');
  background-size:cover;
        -webkit-animation: slidein 100s;
        animation: slidein 100s;

        -webkit-animation-fill-mode: forwards;
        animation-fill-mode: forwards;

        -webkit-animation-iteration-count: infinite;
        animation-iteration-count: infinite;

        -webkit-animation-direction: alternate;
        animation-direction: alternate;              
}

@-webkit-keyframes slidein {
from {background-position: top; background-size:3000px; }
to {background-position: -100px 0px;background-size:2750px;}
}

@keyframes slidein {
from {background-position: top;background-size:3000px; }
to {background-position: -100px 0px;background-size:2750px;}

}

  .container {
    max-width: 400px;
    margin: 50px auto;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    display: flex;
    overflow: auto;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    background-color: #6d7ab7;
  }

  .background {
    width: 100%;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
  }

  label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
  }

  input {
    width: 100%;
    padding: 8px;
    margin-bottom: 16px;
    box-sizing: border-box;
  }

  button {
    background-color: #4caf50;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:hover {
    background-color: #45a049;
  }

  .confirmation {
    color: white;
  }

  .confirmation-message {
    background-color: #4CAF50; /* Green background */
    color: #fff; /* White text */
    padding: 10px;
    border-radius: 4px;
    margin-top: 1px;
    text-align: center;
  }

  .error-message {
    background-color: red;
    color: white;
    padding: 10px;
    border-radius: 4px;
    margin-top: 1px;
    text-align: center;
  }
  .join-title {
  font-size: 2em;
  color: #fff; 
  text-align: center;
  margin-bottom: 20px;
  text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.8);
  background: linear-gradient(to right, #000000dd, #ffffffca);
  border-radius: 8px;
  padding: 5px;
  }

</style>

<Layout title='Register'>
  {message.username && (
    <div class={message.username.includes("successfully") ? "confirmation-message" : "error-message"}>
      <p class="confirmation">{message.username}</p>
    </div>
  )}

  <div class="background"></div>

  <div class="container">
    <h2 class="join-title">Join the Hobby HUB!</h2>
    
    <form method="POST">
      <label for="username">Username:</label>
      <input type="text" id="username" name="username" required />

      <label for="password">Password:</label>
      <input type="password" id="password" name="password" required />

      {/* Add email field */}
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required />

      <label for="phone">Phone Number:</label>
      <input type="number" id="phone" name="phone" required />

      <label for="age">Age:</label>
      <input type="number" id="age" name="age" required />

      <label for="favouriteHobby">Favourite Hobby:</label>
      <select id="favouriteHobby" name="favouriteHobby" required>
        {hobbyCategories.map(category => (
          <option id={category.id} value={category.category_name}>
            {category.category_name}
          </option>
        ))}
      </select>

      <label for="bio">Bio:</label>
      <textarea id="bio" name="bio" style="width: 100%; height: 100px; resize: none;" rows="4" cols="50" required ></textarea>
      <button type="submit">Register</button>
    </form>
  </div>
</Layout>
