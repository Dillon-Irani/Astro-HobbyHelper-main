---
import Layout from '../layouts/Layout.astro';
import styles from '../styles/card.module.css'
import { XataClient } from '.././xata.ts';

const xata = new XataClient({
  apiKey: import.meta.env.XATA_API_KEY,
  branch: import.meta.env.XATA_BRANCH
});
const { records: categories } = await xata.db.product_category.getPaginated({
  pagination: {
    size: 200
  }

})
const { records: products } = await xata.db.product.getPaginated({
  pagination: {
    size: 200,
  },
});
const { records: product_variation } = await xata.db.product_variation.getPaginated({
  pagination: {
    size: 200,
  },
});
const { records: product_variation_option } = await xata.db.product_variation_option.getPaginated({
  pagination: {
    size: 200,
  },
});
const { records: product_configuration } = await xata.db.product_configuration.getPaginated({
  pagination: {
    size: 200,
  },
});
const searchQuery = Astro.params.search;
console.log('Search term:', searchQuery);

if (searchQuery) {
  console.log('Search term:', searchQuery);
} else {
  console.log('No search term provided.');
}







// Function to find the most parent category name
const findMostParentCategory = (categoryId) => {
  const productCategory = categories.find((category) => category.product_category_id === categoryId);

  if (productCategory) {
    // If the category has a parent, recursively find the parent category
    if (productCategory.parent_category_id) {
      return findMostParentCategory(productCategory.parent_category_id);
    } else {
      // If there is no parent, return the category name
      return productCategory.category_name;
    }
  }

  // Return a default value if category is not found
  return 'Category not available';
};
// Extract the search query from Astro.params


// Define selectedCategory variable
let selectedCategory = null;

// Filter products by their category of the current product page
const productsInSameCategory = products.filter(product => findMostParentCategory(product.category_id) === selectedCategory);

const filteredCategoryProducts = selectedCategory ? productsInSameCategory : products;



---

<Layout title="Products">
  <script is:inline>
    // Define selectedCategory variable
    let selectedCategory = null;
  
    // Function to filter products by category
    const filterProductsByCategory = (categoryId) => {
      selectedCategory = categoryId;
      console.log('Filter products by category id:', categoryId);
      
    };
  
  </script>
  <main>
    
    <div>
      
      <h2 style="color: white; text-align: center; padding: 15px;">Inventory Page</h2>
      <div style="text-align: center; margin-bottom: 20px;">
        <button onclick="filterProductsByCategory(null)">All</button> <!-- Button to show all products -->
        <!-- Create buttons for each category -->
        {categories.map(category => (
          <button onclick={`filterProductsByCategory('${category.product_category_id}')`}>
            {category.category_name}
          </button>
        ))}
      </div>
      <div class={`${styles['product-container']}`}>
        {products
          
          .map(product => (
            <a href={"/Products/" + product.product_id}>
              <div ={product.product_id} class={styles['product-card']}>
              <div class={styles['title-div']}>
                <h1 class={styles['product-name']}>{product.product_name}</h1>
                <div class={styles['price-div']}>
                  <span>Price Per Unit: </span>
                  <span class={styles['price']}>{`$ ${product_configuration.find(
                    (config) => config.product_item_id === product.product_id )?.price || 'Price not available'}`}</span>
                </div>
              </div>
              <img
                alt="image"
                src={product.product_image ? product.product_image : 'https://i.imgur.com/O01kM4S.jpg'}
                class={styles['product-image']}
              />
              <div class={styles['brand-div']}>
                <span class={styles['brand']}>Brand:</span>
                <span class={styles['brand-name']}>{product.product_brand}</span>
              </div>
              <div class={styles['category-div']}>
                <span class={styles['category']}>Category:</span>
                <span class={styles['category-name']}>{categories.find(
                  (category) => category.product_category_id === product.category_id
                )?.category_name || 'Category not available'}</span>
              </div>
              <div class={styles['type-div']}>
                <span class={styles['type']}>Product Type:</span>
                <span class={styles['type-name']}>{findMostParentCategory(product.category_id)}</span>
              </div>
              <div class={styles['description-div']}>
                <span class={styles['description']}>Description:</span>
                <span class={styles['description-text']}>{product.description}</span>
              </div>
            </div>
          </a>
        ))}
        
      </div>
      <div style="text-align: center;">
        <button onclick="loadMoreProducts()">Load More Products</button>
      </div>
    </div>
  </main>
  
</Layout>


