---
import Layout from '../layouts/Layout.astro';
import { XataClient } from '../xata.js';
import { userInfo, getUserInfo, isLoggedIn, clearUserInfo } from '../components/userInformation.js';
const loggedIn = isLoggedIn.get();
if (!loggedIn) {
  return Astro.redirect('/SignIn'); 
};
const xata = new XataClient({
  apiKey: import.meta.env.XATA_API_KEY,
  branch: import.meta.env.XATA_BRANCH
});

const { records: backlogRecords } = await xata.db.backlog.getPaginated({
  pagination: {
    size: 200
  }
});
const { records: productCategories } = await xata.db.product_category.getPaginated({
  pagination: {
    size: 200
  }
});
const { records: variationOptions } = await xata.db.product_variation_option.getPaginated({
  pagination: {
    size: 200
  }
});
const { records: products } = await xata.db.product.getPaginated({
  pagination: {
    size: 200,
  },
});
const { records: product_configuration } = await xata.db.product_configuration.getPaginated({
  pagination: {
    size: 200,
  },
});
const { records: users } = await xata.db.hh_user.getPaginated({
  pagination: {
    size: 200,
  },
});
const { records: reservations } = await xata.db.reservations.getPaginated({
  pagination: {
    size: 200,
  },
});
const { records: events } = await xata.db.events.getPaginated({
  pagination: {
    size: 200,
  },
});

// Filter userDataArray to only include reservations for the signed-in user
const signedInUserId = parseInt(userInfo.get().id, 10);
const listEvents = events;

// Sort the userReservations by total cost
listEvents.sort((a, b) => a.event_id - b.event_id);

---

<style>
 .table-container {
    max-width: 800px;
    margin: 20px auto;
  }

  table {
    background-color: #535C91; 
    width: 100%;
    border-collapse: collapse;
  }

  th {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
    color:white
  }

  th {
    background-color: #f2f2f2;
  }
  tr{}
  .backlog-button {
    background-color: #007bff; /* Nice blue color */
    color: white; /* Text color */
    padding: 10px 20px; /* Adjust padding as needed */
    border: none;
    border-radius: 5px;
    cursor: pointer;
    display: block; /* Ensure it spans the full width */
    margin: 0 auto; /* Center horizontally */
}
.img{
  width: 15px;
}

.backlog-button:hover {
    background-color: #0056b3; /* Darker shade of blue on hover */
}
.delete-button {
    background-color: #af4c4c;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .delete-button:hover {
    background-color: #a04545;
  }
  .qty-button {
    background-color: #af8b4c;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .qty-button:hover {
    background-color: rgb(128, 113, 56);
  }
  .price-button {
    background-color: #7daf4c;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .price-button:hover {
    background-color: #4e6c2f;
  }
  
</style>
<script is:inline>

    function quitEvent(eventId) {
      window.location.href = `/ConfirmQuitEvent?quitid=${eventId}`;
  
    };
    </script>
<Layout title="Manage Events">
  <div class="table-container">
    {listEvents.filter(event => event.event_attendee_user_id === signedInUserId).length === 0 ? (
      <p style={{ color: 'red', textAlign: 'center' }}>
        You havent signed up for any events! <a href="/Events" style={{ color: 'blue' }}>Click here</a> to go to the event page.
      </p>
    ) : (
      <table>
        <thead>
          <tr>
            <th>Event ID</th>
            <th>Event Type</th>
            <th>Tickets Remaining</th>
            <th>Event Price</th>
            <th>Event Description</th>
            <th>Event Image</th>
            <th>Event Date</th>
            <th>Event Start Time</th>
            <th>Event End Time</th>
            <th>Join Event</th>
          </tr>
        </thead>
        <tbody>
          {listEvents
            .filter(event => event.event_attendee_user_id === signedInUserId)
            .map(event => (
              <tr key={event.event_id}>
                <td>{event.event_id}</td>
                <td>{event.event_type}</td>
                <td>{event.tickets_remaining === null ? 'âˆž' : event.tickets_remaining}</td>
                <td>$ {event.event_price}</td>
                <td>{event.event_description}</td>
                <td>
                  <img 
                    alt="image" 
                    src={event.event_img ? event.event_img : 'https://i.imgur.com/O01kM4S.jpg'} 
                    style={{ width: '155px' }} 
                  />
                </td>
                <td>{event.event_date}</td>
                <td>{event.event_start_time}</td>
                <td>{event.event_end_time}</td>
                <td>
                  <button class='delete-button' type="button" onclick={`quitEvent(${event.event_id})`}>Resign from Event</button>
                  <br/>
                </td>
              </tr>
            ))}
        </tbody>
      </table>
    )}
  </div>
</Layout>