---
import Layout from '../layouts/Layout.astro';
import { XataClient } from '../xata';
import { userInfo, getUserInfo, isLoggedIn, clearUserInfo  } from '../components/userInformation';
// Redirect to hobby home page if not admin 
const isAdmin = isLoggedIn.get() && userInfo.get().userType === 'admin';
if (!isAdmin) {
  return Astro.redirect('/HobbyHome'); 
};
const xata = new XataClient({
  apiKey: import.meta.env.XATA_API_KEY,
  branch: import.meta.env.XATA_BRANCH
});

const { records: events } = await xata.db.events.getPaginated({
  pagination: {
    size: 200
  }
});


interface Message {
  eventId: string;
  eventType: string;
  ticketsRemaining: number;
  eventPrice: number;
  eventDescription: string;
  eventDate: Date;
  eventStartTime: Date;
  eventEndTime: Date;
  eventImage: string;
  error?: string;
}

const message: Message = {
  eventId: "",
  eventType: "",
  ticketsRemaining: -1,
  eventPrice: 0,
  eventDescription: "",
  eventDate: null,
  eventStartTime: null,
  eventEndTime: null,
  eventImage: "",
};

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const action = data.get('action');

    if (action === 'addEvent') {
      const eventType = String(data.get("eventType"));
      const eventDesc = String(data.get("eventDesc"));
      const ticketsRemaining = parseInt(data.get("ticketsRemaining"));
      const eventPrice = String(data.get("eventPrice"));
      const eventDate = String(data.get("eventDate"));
      const eventStartTime = eventDate;
      const eventEndTime = String(data.get("eventEndTime"));
      const eventImage = String(data.get("eventImage"));
      const isAvailable = false;
      const signedInUserId = parseInt(userInfo.get().id);

      if (!eventType.trim() || !eventPrice.trim() || !eventDesc.trim() || isNaN(ticketsRemaining)
      || !eventImage.trim()) {
        message.error = "All fields are required and tickets and price should be valid numbers.";
      } else {
         // Convert eventDate to a Date object
         
         const startDate = new Date(eventDate);
         const endDate = new Date(eventEndTime);
         console.log(eventDate);
         console.log(eventEndTime);
         console.log(startDate);
         console.log(endDate);
        

        const { records: recentEvents } = await xata.db.events.sort('event_id', 'desc').getPaginated({ pagination: { size: 1 } });
        const newEventId = recentEvents.length > 0 ? recentEvents[0].event_id + 1 : 1;

        await xata.db.events.create({
          event_id: newEventId,
          event_description: eventDesc,
          event_attendee_user_id: signedInUserId,
          event_type: eventType,
          tickets_remaining: ticketsRemaining,
          event_price: eventPrice,
          event_date: startDate,
          event_start_time: startDate,
          event_end_time: endDate,
          event_img: eventImage,
          is_available: isAvailable,
        });
        message.eventId = `Event with ID:"${newEventId}" added successfully!`;
      }
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---
<style>
    .confirmation-message {
    color: white;
  }
  .confirmation-message {
    background-color: #4CAF50; /* Green background */
    color: #fff; /* White text */
    padding: 10px;
    border-radius: 4px;
    margin-top: 10px;
    margin-bottom: 15px; 
    text-align: center;
  }

  .error-message {
    background-color: red;
    color: white;
    padding: 10px;
    border-radius: 4px;
    margin-top: 10px;
    margin-bottom: 15px; 
    text-align: center;
  }
    body {
      font-family: Arial, sans-serif;
      color:  #fff; 
    }
  
    .form-container {
      background-color: #535C91; 
      border-radius: 8px; /* Rounded corners */
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Shadow effect */
      padding: 20px;
      max-width: 500px; /* Limit width for better readability */
      margin: 0 auto; /* Center the form horizontally */
    }
  
    .form-header {
      text-align: center;
      margin-bottom: 20px;
    }
  
    .form-header h2 {
      margin-top: 0;
      color: #070F2B; /* Green color for headers */
    }
  
    .form-group {
      margin-bottom: 15px;
    }
  
    .form-group label {
      display: block;
      font-weight: bold;
    }
  
    .form-group input,
    .form-group select,
    .form-group textarea {
      width: 100%;
      padding: 10px;
      border: 1px solid #ccc; /* Light gray border */
      border-radius: 4px;
      box-sizing: border-box;
      font-size: 16px;
    }
  
    .form-group select {
      
      background-position: right 10px top 50%;
      background-size: 20px;
      padding-right: 40px; /* Space for dropdown arrow */
    }
  
    .form-group textarea {
      height: 100px; /* Set a fixed height for textarea */
      max-width: 100%;
    }
  
    .form-group button {
      background-color: #4CAF50; /* Green background for button */
      color: #fff; /* White text color */
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      font-size: 16px;
      cursor: pointer;
      width: 100%;
    }
  
    .form-group button:hover {
      background-color: #45a049; /* Darker green on hover */
    }
    .imgur-button {
        background-color: #be17e8; /* Pink color */
        color: #fff; /* White text color */
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        margin-bottom: 15px;
    }

    .imgur-button:hover {
        background-color: #d937f1; /* Lighter pink on hover */
    }
    .backlog-button {
    background-color: #007bff; /* Nice blue color */
    color: white; /* Text color */
    padding: 10px 20px; /* Adjust padding as needed */
    border: none;
    border-radius: 5px;
    width: 15%;
    cursor: pointer;
    display: block; /* Ensure it spans the full width */
    margin: 0 auto; /* Center horizontally */
}

.backlog-button:hover {
    background-color: #0056b3; /* Darker shade of blue on hover */
}

  </style>
  
  <Layout title="Create New Event">
    {message.error && (
        <div class="error-message">
          <p class="error">{message.error}</p>
        </div>
      )}
    
      {message.eventId && (
        <div class={message.eventId.includes("successfully") ? "confirmation-message" : "error-message"}>
          <p class="confirmation">{message.eventId}</p>
        </div>
      )}
    <div class="form-container">
      <div class="form-header">
        <h2 style="color:white;">Create New Event</h2>
      </div>
      <form method="POST">
        <input type="hidden" name="action" value="addEvent">
  
        <div class="form-group">
          <label for="eventType">Event Type:</label>
          <input type="text" id="eventType" name="eventType" required>
        </div>
        <div class="form-group">
          <label for="eventDesc">Event Description:</label>
      <textarea id="eventDesc" name="eventDesc" style="width: 100%; height: 100px; resize: none;" rows="4" cols="50" required></textarea>
        </div>
        <div class="form-group">
          <label for="ticketsRemaining">Tickets Remaining:</label>
          <input type="number" id="ticketsRemaining" name="ticketsRemaining" required>
        </div>
  
        <div class="form-group">
          <label for="eventPrice">Event Price:</label>
          <input type="number" id="eventPrice" name="eventPrice" min="0"  step="0.01"required>
        </div>
  
        <div class="form-group">
          <label for="eventImage">Event Image URL:</label>
          <input type="text" id="eventImage" name="eventImage" required>
          
        </div>
        <button class='imgur-button' type="button" onclick="window.open('https://imgur.com/a/6O7RMNs', '_blank')" style="width: 100%;">Imgur Collection</button>
        <div class="form-group">
          <label for="eventDate">Event Start:</label>
          <input type="datetime-local" id="eventDate" name="eventDate" required>
        </div>
  
        <div class="form-group">
          <label for="eventEndTime">Event End:</label>
          <input type="datetime-local" id="eventEndTime" name="eventEndTime" required>
        </div>
  
        <div class="form-group">
          <button type="submit">Add Event</button>
        </div>
      </form>
    </div>
    <br />
    <button class='backlog-button' onclick="window.location.href='/AdminDashboard'" >Return to Dashboard</button>
  </Layout>