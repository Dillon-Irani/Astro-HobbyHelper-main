---
import Layout from '../layouts/Layout.astro';
import { XataClient } from '../xata.js';
import { userInfo, getUserInfo, isLoggedIn, clearUserInfo } from '../components/userInformation.js';
// Redirect to hobby home page if not admin 
const isAdmin = isLoggedIn.get() && userInfo.get().userType === 'admin';
if (!isAdmin) {
  return Astro.redirect('/HobbyHome'); 
};

const xata = new XataClient({
  apiKey: import.meta.env.XATA_API_KEY,
  branch: import.meta.env.XATA_BRANCH
});

const { records: backlogRecords } = await xata.db.backlog.getPaginated({
  pagination: {
    size: 200
  }
});
const { records: productCategories } = await xata.db.product_category.getPaginated({
  pagination: {
    size: 200
  }
});
const { records: variationOptions } = await xata.db.product_variation_option.getPaginated({
  pagination: {
    size: 200
  }
});
const { records: products } = await xata.db.product.getPaginated({
  pagination: {
    size: 200,
  },
});
const { records: product_configuration } = await xata.db.product_configuration.getPaginated({
  pagination: {
    size: 200,
  },
});
const { records: users } = await xata.db.hh_user.getPaginated({
  pagination: {
    size: 200,
  },
});
const { records: reservations } = await xata.db.reservations.getPaginated({
  pagination: {
    size: 200,
  },
});

// Filter userDataArray to only include reservations for the signed-in user
const signedInUserId = userInfo.get().id;
const listProducts = products;

// Sort the userReservations by total cost
listProducts.sort((a, b) => a.product_id - b.product_id);

---

<style>
  .table-container {
    max-width: 800px;
    margin: 20px auto;
  }

  table {
    background-color: #535C91; 
    width: 100%;
    border-collapse: collapse;
  }

  th {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
  }
  td {
    padding: 8px;
    text-align: left;
    border-bottom: 1px solid #ddd;
    color:white
  }

  th {
    background-color: #f2f2f2;
  }
  tr{}
  .backlog-button {
    background-color: #007bff; /* Nice blue color */
    color: white; /* Text color */
    padding: 10px 20px; /* Adjust padding as needed */
    border: none;
    border-radius: 5px;
    cursor: pointer;
    display: block; /* Ensure it spans the full width */
    margin: 0 auto; /* Center horizontally */
}

.backlog-button:hover {
    background-color: #0056b3; /* Darker shade of blue on hover */
}
.delete-button {
    background-color: #af4c4c;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .delete-button:hover {
    background-color: #a04545;
  }
  .qty-button {
    background-color: #af8b4c;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .qty-button:hover {
    background-color: rgb(128, 113, 56);
  }
  .price-button {
    background-color: #7daf4c;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  .price-button:hover {
    background-color: #4e6c2f;
  }
  .backlog-button {
    background-color: #007bff; /* Nice blue color */
    color: white; /* Text color */
    padding: 10px 20px; /* Adjust padding as needed */
    border: none;
    border-radius: 5px;
    width: 15%;
    cursor: pointer;
    display: block; /* Ensure it spans the full width */
    margin: 0 auto; /* Center horizontally */
}

.backlog-button:hover {
    background-color: #0056b3; /* Darker shade of blue on hover */
}

  
</style>
<script is:inline>

    function deleteProduct(reservationId) {
      window.location.href = `/ConfirmDeleteProduct?delete=${reservationId}`;
  
    };
    function changeProductQty(reservationId) {
      window.location.href = `/ConfirmChangeProductQty?change=${reservationId}`;
  
    };
    function changeProductPrice(reservationId) {
      window.location.href = `/ConfirmChangeProductPrice?change=${reservationId}`;
  
    };
    </script>
<Layout title="Manage Products">
  <button class='backlog-button' onclick="window.location.href='/AdminDashboard'" >Return to Dashboard</button>
  <div class="table-container">
    <table>
      <thead>
        <tr>
          <th>Product ID</th>
          <th>Name</th>
          <th>Product Brand</th>
          <th>Category</th>
          <th>Description</th>
          <th>QTY</th>
          <th>Price</th>
          <th>Manage Product</th>
        </tr>
      </thead>
      <tbody>
        {listProducts.map(product => {
          const productConfiguration = product_configuration.find(config => config.product_item_id === product.product_id);
          const category = productCategories.find(category => category.product_category_id === product.category_id);
        
          return (
            <tr key={product.product_id}>
              <td>{product.product_id}</td>
              <td>{product.product_name}</td>
              <td>{product.product_brand}</td>
              <td>{category ? category.category_name : 'Category not available'}</td>
              <td>{product.description}</td>
              <td>{productConfiguration ? productConfiguration.qty_in_stock : 'Qty not available'}</td>
              <td>${productConfiguration ? productConfiguration.price : 'Price not available'}</td>
              <td>
                <button class='delete-button' type="button" onclick={`deleteProduct(${product.product_id})`}>Delete</button>
                <button class='qty-button' type="button" onclick={`changeProductQty(${product.product_id})`}>Change QTY</button>
                <button class='price-button' type="button" onclick={`changeProductPrice(${product.product_id})`}>Change Price</button>
                <br/>
              </td>
            </tr>
          );
        })}
</Layout>