---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Login from '../components/Login.tsx';
import bcrypt from "bcrypt";
import { XataClient } from '.././xata';
import {getUserInfo, setUserInfo, isLoggedIn } from '../components/userInformation.js';

const xata = new XataClient({
  apiKey: import.meta.env.XATA_API_KEY,
  branch: import.meta.env.XATA_BRANCH
});

const { records } = await xata.db.product_category.getPaginated({
  pagination: {
    size: 50
  }
});

const message = { username: "", password: "" };

if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const inputUsername = String(data.get("username"));
    const inputPassword = String(data.get("password"));

    // Fetch user data from the database
    const users = await xata.db.hh_user
      .filter({
        username: inputUsername,
      })
      .getMany();

    if (users.length > 0) {
      const storedPasswordHash = users[0].password;
      const userType = users[0].user_type;
      const dbUsername = users[0].username;
      const userId = users[0].user_id;
      // Compare the provided password with the stored hash
      const passwordMatch = await bcrypt.compare(inputPassword, storedPasswordHash);

      if (passwordMatch) {
        // Passwords match, login 
        // Update userInfo store with user information
        
          const userInfo = {
          id: userId,
          username: dbUsername,
          userType: userType}

        
        setUserInfo(userInfo);
        console.log(userInfo);
        console.log(getUserInfo());
        // Set isLoggedIn to true
        isLoggedIn.set(true);
        

        message.username += "Logged in successfully!";
        return Astro.redirect('/HobbyHome');
      } else {
        // Password is incorrect
        message.username += "Incorrect password";
      }
    } else {
      // User not found
      message.username += "User not found";
    }
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---
<script>
import {getUserInfo, setUserInfo, isLoggedIn } from '../components/userInformation.js';

  </script>
<style>
  body {
    background-image: url("../images/background2.gif");
    font-family: Arial, sans-serif;
    background-size: cover;
  }

  .container {
    max-width: 400px;
    margin: 50px auto;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    display: flex;
    overflow: auto;
    align-items: center;
    flex-direction: column;
    justify-content: center;
    background-color: #6d7ab7;
  }

  .background {
    width: 100%;
    height: 100vh;
    position: fixed;
    top: 0;
    left: 0;
    z-index: -1;
  }

  label {
    display: block;
    margin-bottom: 8px;
    font-weight: bold;
  }

  input {
    width: 100%;
    padding: 8px;
    margin-bottom: 16px;
    box-sizing: border-box;
  }

  button {
    background-color: #4caf50;
    color: #fff;
    padding: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
  }

  button:hover {
    background-color: #45a049;
  }

  .confirmation {
    color: white;
  }

  .error-message {
    background-color: red;
    color: white;
    padding: 10px;
    border-radius: 4px;
    margin-top: 1px;
    text-align: center;
  }
</style>

<Layout title='Sign In'>
  {message.username && (
    <div class={message.username.includes("successfully") ? "confirmation-message" : "error-message"}>
      <p class="confirmation">{message.username}</p>
    </div>
  )}

  <div class="background"></div>

  <div class="container">
    <h2 style="text-align: center;">Sign In</h2>
    <Login client:load/>
    <form method="POST">
      <label for="username">Username:</label>
      <input type="text" id="username" name="username" required>

      <label for="password">Password:</label>
      <input type="password" id="password" name="password" required>

      <button type="submit">Sign In</button>
      {message.username && <p>{message.username}</p>}
    </form>
  </div>
</Layout>
